;; Some logical operators.

(define not
    (lambda (b)
        (if b
            #f
            #t)))

(define or
    (lambda (a b)
        (if a
            #t
            (if b
                #t
                #f))))

(define and
    (lambda (a b)
        (if a
            (if b
                #t
                #f)
            #f)))

(define xor
    (lambda (a b)
        (if a
            (if (eq b #f)
                #t
                #f)
            (if b #t #f))))

;; List functions

(define length
    (lambda (lst)
        (if (empty lst)
            0
            (+ 1 (length (tail lst))))))

(define sum
    (lambda (lst)
        (if (empty lst)
            0
            (+ (head lst) (sum (tail lst))))))

(define range
    (lambda (a b)
        (if (<= a b)
            (cons a (range (+ a 1) b))
            '())))

(define append
    (lambda (lst1 lst2)
        (if (empty lst1)
            lst2
            (cons (head lst1) (append (tail lst1) lst2)))))
        
(define reverse
    (lambda (lst)
        (if (empty lst)
            '()
            (append (reverse (tail lst)) (cons (head lst) '())))))

(define filter
    (lambda (fn lst)
        (if (empty lst)
            lst
            (if (fn (head lst))
                (cons (head lst) (filter fn (tail lst)))
                (filter fn (tail lst))))))

(define map
    (lambda (fn lst)
        (if (empty lst)
            lst
            (cons (fn (head lst)) (map fn (tail lst))))))

(define reduce
    (lambda (fn acc lst)
        (if (empty lst)
            acc
            (reduce fn (fn acc (head lst)) (tail lst)))))

;; list integer integer -> list
;; consume a list and two integers. return a new list compose of the elements from index p to q
(define slice
    (lambda (lst p q)
        (if (or (empty lst) (eq q (- 0 1)))
            '()
            (if (> p 0)
                (slice (tail lst) (- p 1) (- q 1))
                (cons (head lst) (slice (tail lst) p (- q 1)))))))

;; Sort (Merge sort)

;; list list -> list
;; consume two sorted lists and produce a new list merging them and keeping them sort
(define merge
    (lambda (lst1 lst2)
        (if (empty lst1)
            lst2
            (if (empty lst2)
                lst1
                (if (> (head lst1) (head lst2))
                    (cons (head lst2) (merge lst1 (tail lst2)))
                    (cons (head lst1) (merge (tail lst1) lst2)))))))


;; list -> list
;; consume a list and produce a sorted list with the same elements
(define sort
    (lambda (lst)
        (if (<= (length lst) 1)
            lst
            (merge (sort (slice lst 0 (- (/ (length lst) 2) 1)))
                   (sort (slice lst (/ (length lst) 2) (- (length lst) 1)))))))
